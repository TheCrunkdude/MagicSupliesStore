trigger:
- main  # Ejecutar en cada push a main

pool:
  vmImage: windows-latest  # Usa un agente de Windows

variables:
  DOTNET_VERSION: '7.0.2'
  API_PATH: 'C:\Users\Administrator\Documents\Test'  # Ruta en EC2

stages:
- stage: Build
  jobs:
  - job: Build_API
    steps:
    - task: UseDotNet@2
      inputs:
        packageType: sdk
        version: $(DOTNET_VERSION)

    - script: |
        dotnet restore
        dotnet publish -c Release -o $(Build.ArtifactStagingDirectory)/api
      displayName: 'Compilar y Publicar API'

    - publish: $(Build.ArtifactStagingDirectory)/api
      artifact: api

- stage: Deploy
  dependsOn: Build
  condition: succeeded()
  jobs:
  - job: DeployToEC2
    steps:
    - task: DownloadBuildArtifacts@0
      inputs:
        artifactName: api
        downloadPath: $(Build.ArtifactsDirectory)

    # ðŸ”¹ Conectarse a EC2 y detener IIS antes de copiar archivos
    - task: SSH@0
      inputs:
        sshEndpoint: 'EC2-Windows-SSH'  # Nombre de la conexiÃ³n SSH en Azure DevOps
        runOptions: 'inline'
        inline: |
          Stop-Service -Name "W3SVC" -Force
          Remove-Item -Recurse -Force $(API_PATH)\*
      displayName: 'Detener IIS y Limpiar Carpeta'

    # ðŸ”¹ Copiar archivos compilados a EC2 usando SSH (SCP)
    - task: CopyFilesOverSSH@0
      inputs:
        sshEndpoint: 'EC2-Windows-SSH'  # Nombre de la conexiÃ³n SSH configurada en Azure DevOps
        sourceFolder: '$(Build.ArtifactsDirectory)/api'
        targetFolder: '$(API_PATH)'
        cleanTargetFolder: true  # Borra archivos en el destino antes de copiar
        overwrite: true  # Sobrescribe archivos existentes
      displayName: 'Copiar Archivos a EC2'

    # ðŸ”¹ Reiniciar IIS despuÃ©s de copiar archivos
    - task: SSH@0
      inputs:
        sshEndpoint: 'EC2-Windows-SSH'
        runOptions: 'inline'
        inline: |
          Start-Service -Name "W3SVC"
      displayName: 'Iniciar IIS'
